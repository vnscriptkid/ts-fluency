// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`tsc > Should have the correct TypeScript errors 1`] = `
",src/01-branded-types/02-form-validation.problem.ts(28,19): error TS2345: Argument of type '{ email: string; password: string; }' is not assignable to parameter of type '{ email: Email; password: Password; }'.
  Types of property 'email' are incompatible.
    Type 'string' is not assignable to type 'Email'.
      Type 'string' is not assignable to type '{ [brand]: \\"Email\\"; }'.
src/01-branded-types/03-entity-fetching.problem.ts(45,3): error TS2578: Unused '@ts-expect-error' directive.
src/01-branded-types/03-entity-fetching.problem.ts(52,3): error TS2578: Unused '@ts-expect-error' directive.
src/01-branded-types/04-reusable-valid-brand.problem.ts(25,5): error TS2578: Unused '@ts-expect-error' directive.
src/01-branded-types/05-currency-conversion.problem.ts(41,7): error TS2578: Unused '@ts-expect-error' directive.
src/01-branded-types/05-currency-conversion.problem.ts(53,7): error TS2578: Unused '@ts-expect-error' directive.
src/01-branded-types/05-currency-conversion.problem.ts(56,7): error TS2578: Unused '@ts-expect-error' directive.
src/01-branded-types/06-index-signatures.problem.ts(45,12): error TS2344: Type 'false' does not satisfy the constraint 'true'.
src/01-branded-types/06-index-signatures.problem.ts(46,12): error TS2344: Type 'false' does not satisfy the constraint 'true'.
src/01-branded-types/06-index-signatures.problem.ts(59,3): error TS2578: Unused '@ts-expect-error' directive.
src/02-globals/07-add-function-to-global-scope.problem.ts(20,12): error TS7017: Element implicitly has an 'any' type because type 'typeof globalThis' has no index signature.
src/02-globals/07-add-function-to-global-scope.problem.ts(21,12): error TS7017: Element implicitly has an 'any' type because type 'typeof globalThis' has no index signature.
src/02-globals/07-add-function-to-global-scope.problem.ts(24,10): error TS2304: Cannot find name 'myFunc'.
src/02-globals/07-add-function-to-global-scope.problem.ts(25,36): error TS2304: Cannot find name 'myFunc'.
src/02-globals/07-add-function-to-global-scope.problem.ts(29,10): error TS2304: Cannot find name 'myVar'.
src/02-globals/07-add-function-to-global-scope.problem.ts(30,36): error TS2304: Cannot find name 'myVar'.
src/02-globals/08-add-to-window.problem.ts(13,8): error TS2339: Property 'makeGreeting' does not exist on type 'Window & typeof globalThis'.
src/02-globals/08-add-to-window.problem.ts(16,17): error TS2339: Property 'makeGreeting' does not exist on type 'Window & typeof globalThis'.
src/02-globals/08-add-to-window.problem.ts(18,43): error TS2339: Property 'makeGreeting' does not exist on type 'Window & typeof globalThis'.
src/02-globals/09-adding-to-process-env.problem.ts(23,24): error TS2344: Type 'false' does not satisfy the constraint 'true'.
src/02-globals/10-event-dispatcher.problem.1.ts(36,19): error TS2322: Type '\\"LOG_OUT\\"' is not assignable to type '\\"LOG_IN\\"'.
src/02-globals/10-event-dispatcher.problem.2.ts(11,10): error TS2678: Type '\\"LOG_OUT\\"' is not comparable to type '\\"LOG_IN\\"'.
src/02-globals/10-event-dispatcher.problem.2.ts(14,10): error TS2678: Type '\\"UPDATE_USERNAME\\"' is not comparable to type '\\"LOG_IN\\"'.
src/02-globals/10-event-dispatcher.problem.2.ts(21,13): error TS2322: Type '\\"LOG_OUT\\"' is not assignable to type '\\"LOG_IN\\"'.
src/02-globals/10-event-dispatcher.problem.2.ts(22,13): error TS2322: Type '\\"UPDATE_USERNAME\\"' is not assignable to type '\\"LOG_IN\\"'.
src/03-type-predicates-assertion-functions/12-type-predicates-with-filter.problem.ts(13,23): error TS2344: Type 'false' does not satisfy the constraint 'true'.
src/03-type-predicates-assertion-functions/13-assertion-functions.problem.ts(38,26): error TS2344: Type 'false' does not satisfy the constraint 'true'.
src/03-type-predicates-assertion-functions/14-typescripts-worst-error.problem.ts(45,5): error TS2775: Assertions require every name in the call target to be declared with an explicit type annotation.
src/03-type-predicates-assertion-functions/14-typescripts-worst-error.problem.ts(47,26): error TS2344: Type 'false' does not satisfy the constraint 'true'.
src/03-type-predicates-assertion-functions/15-type-predicates-with-generics.problem.ts(18,44): error TS2345: Argument of type '(node: T) => TResult' is not assignable to parameter of type '(value: unknown, index: number, array: unknown[]) => TResult'.
  Types of parameters 'node' and 'value' are incompatible.
    Type 'unknown' is not assignable to type 'T'.
      'T' could be instantiated with an arbitrary type which could be unrelated to 'unknown'.
src/03-type-predicates-assertion-functions/15-type-predicates-with-generics.problem.ts(26,27): error TS2344: Type 'false' does not satisfy the constraint 'true'.
src/03-type-predicates-assertion-functions/15-type-predicates-with-generics.problem.ts(27,14): error TS18046: 'div' is of type 'unknown'.
src/03-type-predicates-assertion-functions/15-type-predicates-with-generics.problem.ts(33,23): error TS2344: Type 'false' does not satisfy the constraint 'true'.
src/03-type-predicates-assertion-functions/15-type-predicates-with-generics.problem.ts(40,27): error TS2344: Type 'false' does not satisfy the constraint 'true'.
src/03-type-predicates-assertion-functions/15-type-predicates-with-generics.problem.ts(42,14): error TS18046: 'body' is of type 'unknown'.
src/03-type-predicates-assertion-functions/15-type-predicates-with-generics.problem.ts(48,23): error TS2344: Type 'false' does not satisfy the constraint 'true'.
src/03-type-predicates-assertion-functions/16-brands-and-type-predicates.problem.ts(35,23): error TS2345: Argument of type 'PasswordValues' is not assignable to parameter of type 'Valid<PasswordValues>'.
src/03-type-predicates-assertion-functions/17-brands-and-assertion-functions.problem.ts(34,21): error TS2345: Argument of type 'PasswordValues' is not assignable to parameter of type 'Valid<PasswordValues>'.
src/04-classes/17.8-classes-as-types-and-value.problem.ts(12,17): error TS18046: 'error' is of type 'unknown'.
src/04-classes/17.8-classes-as-types-and-value.problem.ts(14,35): error TS18046: 'error' is of type 'unknown'.
src/04-classes/18-type-predicates-and-classes.problem.ts(41,23): error TS2344: Type 'false' does not satisfy the constraint 'true'.
src/04-classes/18.2-assertion-functions-and-classes.problem.ts(26,25): error TS2344: Type 'false' does not satisfy the constraint 'true'.
src/04-classes/20-type-safe-map.problem.ts(28,13): error TS2571: Object is of type 'unknown'.
src/04-classes/20-type-safe-map.problem.ts(35,5): error TS2578: Unused '@ts-expect-error' directive.
src/04-classes/21-importance-of-default-generic.problem.ts(37,5): error TS2578: Unused '@ts-expect-error' directive.
src/04-classes/22-dynamic-middleware.problem.ts(42,20): error TS2571: Object is of type 'unknown'.
src/04-classes/22-dynamic-middleware.problem.ts(49,8): error TS2345: Argument of type '(req: Request) => Request' is not assignable to parameter of type 'Middleware<Request, { userId: string; cache: RequestCache; credentials: RequestCredentials; destination: RequestDestination; ... 17 more ...; text(): Promise<...>; }>'.
  Type 'Request' is not assignable to type '{ userId: string; cache: RequestCache; credentials: RequestCredentials; destination: RequestDestination; headers: Headers; ... 16 more ...; text(): Promise<...>; } | Promise<...>'.
    Property 'userId' is missing in type 'Request' but required in type '{ userId: string; cache: RequestCache; credentials: RequestCredentials; destination: RequestDestination; headers: Headers; ... 16 more ...; text(): Promise<...>; }'.
src/04-classes/22-dynamic-middleware.problem.ts(50,13): error TS2339: Property 'userId' does not exist on type 'Request'.
src/04-classes/22-dynamic-middleware.problem.ts(55,15): error TS7006: Parameter 'req' implicitly has an 'any' type.
src/05-external-libraries/23-extract-external-lib-types.problem.ts(14,3): error TS2370: A rest parameter must be of an array type.
src/05-external-libraries/23-extract-external-lib-types.problem.ts(16,32): error TS2556: A spread argument must either have a tuple type or be passed to a rest parameter.
src/05-external-libraries/23-extract-external-lib-types.problem.ts(16,35): error TS2488: Type 'unknown' must have a '[Symbol.iterator]()' method that returns an iterator.
src/05-external-libraries/23-extract-external-lib-types.problem.ts(24,10): error TS2344: Type 'false' does not satisfy the constraint 'true'.
src/05-external-libraries/23-extract-external-lib-types.problem.ts(26,5): error TS2344: Type 'false' does not satisfy the constraint 'true'.
src/05-external-libraries/24-lodash-groupby.problem.ts(55,12): error TS2344: Type 'false' does not satisfy the constraint 'true'.
src/05-external-libraries/24-lodash-groupby.problem.ts(63,9): error TS2578: Unused '@ts-expect-error' directive.
src/05-external-libraries/24-lodash-groupby.problem.ts(67,9): error TS2578: Unused '@ts-expect-error' directive.
src/05-external-libraries/25-usage-with-express.problem.ts(40,26): error TS2344: Type 'false' does not satisfy the constraint 'true'.
src/05-external-libraries/26-usage-with-zod.problem.ts(9,20): error TS18046: 'schema' is of type 'unknown'.
src/05-external-libraries/26-usage-with-zod.problem.ts(21,13): error TS18046: 'args' is of type 'unknown'.
src/05-external-libraries/26-usage-with-zod.problem.ts(21,22): error TS18046: 'args' is of type 'unknown'.
src/05-external-libraries/26-usage-with-zod.problem.ts(27,7): error TS2578: Unused '@ts-expect-error' directive.
src/05-external-libraries/26.5-override-external-lib-types.problem.ts(8,5): error TS2344: Type 'false' does not satisfy the constraint 'true'.
src/06-identity-functions/27-const-annotations.problem.ts(18,5): error TS2344: Type 'false' does not satisfy the constraint 'true'.
src/06-identity-functions/28-constraints-with-const-annotations.problem.ts(19,5): error TS2344: Type 'false' does not satisfy the constraint 'true'.
src/06-identity-functions/28-constraints-with-const-annotations.problem.ts(37,5): error TS2578: Unused '@ts-expect-error' directive.
src/06-identity-functions/29-finite-state-machine.problem.ts(32,5): error TS2322: Type '{ a: { onEntry: () => void; }; b: {}; }' is not assignable to type 'Record<\\"a\\", { onEntry?: (() => void) | undefined; }>'.
  Object literal may only specify known properties, and 'b' does not exist in type 'Record<\\"a\\", { onEntry?: (() => void) | undefined; }>'.
src/06-identity-functions/29-finite-state-machine.problem.ts(38,3): error TS2578: Unused '@ts-expect-error' directive.
src/06-identity-functions/29-finite-state-machine.problem.ts(41,5): error TS2322: Type '{ a: {}; b: {}; }' is not assignable to type 'Record<\\"c\\", { onEntry?: (() => void) | undefined; }>'.
  Object literal may only specify known properties, and 'a' does not exist in type 'Record<\\"c\\", { onEntry?: (() => void) | undefined; }>'.
src/06-identity-functions/30-no-generics-on-objects.problem.ts(19,5): error TS2578: Unused '@ts-expect-error' directive.
src/06-identity-functions/30.5-reverse-mapped-types.problem.ts(8,11): error TS7006: Parameter 'name' implicitly has an 'any' type.
src/06-identity-functions/30.5-reverse-mapped-types.problem.ts(11,24): error TS2344: Type 'false' does not satisfy the constraint 'true'.
src/06-identity-functions/30.5-reverse-mapped-types.problem.ts(13,11): error TS7006: Parameter 'name' implicitly has an 'any' type.
src/06-identity-functions/30.5-reverse-mapped-types.problem.ts(16,24): error TS2344: Type 'false' does not satisfy the constraint 'true'.
src/07-challenges/31-merge-dynamic-object-with-global.problem.ts(13,30): error TS2339: Property 'add' does not exist on type 'Window & typeof globalThis'.
src/07-challenges/31-merge-dynamic-object-with-global.problem.ts(14,30): error TS2339: Property 'subtract' does not exist on type 'Window & typeof globalThis'.
src/07-challenges/31-merge-dynamic-object-with-global.problem.ts(15,30): error TS2339: Property 'multiply' does not exist on type 'Window & typeof globalThis'.
src/07-challenges/31-merge-dynamic-object-with-global.problem.ts(16,30): error TS2339: Property 'divide' does not exist on type 'Window & typeof globalThis'.
src/07-challenges/32-narrow-with-arrays.problem.ts(10,35): error TS18046: 'fruit' is of type 'unknown'.
src/07-challenges/32-narrow-with-arrays.problem.ts(31,1): error TS2578: Unused '@ts-expect-error' directive.
src/07-challenges/32-narrow-with-arrays.problem.ts(35,10): error TS2344: Type 'false' does not satisfy the constraint 'true'.
src/07-challenges/32-narrow-with-arrays.problem.ts(36,10): error TS2344: Type 'false' does not satisfy the constraint 'true'.
src/07-challenges/33-zod-with-express.problem.ts(49,18): error TS2344: Type 'false' does not satisfy the constraint 'true'.
src/07-challenges/33-zod-with-express.problem.ts(50,18): error TS2344: Type 'false' does not satisfy the constraint 'true'.
src/07-challenges/33-zod-with-express.problem.ts(62,16): error TS2344: Type 'false' does not satisfy the constraint 'true'.
src/07-challenges/34-dynamic-reducer.problem.ts(32,5): error TS2571: Object is of type 'unknown'.
src/07-challenges/34-dynamic-reducer.problem.ts(38,21): error TS2571: Object is of type 'unknown'.
src/07-challenges/34-dynamic-reducer.problem.ts(38,35): error TS18046: 'action' is of type 'unknown'.
src/07-challenges/34-dynamic-reducer.problem.ts(52,17): error TS2571: Object is of type 'unknown'.
src/07-challenges/34-dynamic-reducer.problem.ts(52,36): error TS2558: Expected 0 type arguments, but got 1.
src/07-challenges/34-dynamic-reducer.problem.ts(55,5): error TS2345: Argument of type '(state: unknown, action: { username: string; password: string; }) => { username: string; password: string; }' is not assignable to parameter of type '(state: unknown, payload: unknown) => unknown'.
  Types of parameters 'action' and 'payload' are incompatible.
    Type 'unknown' is not assignable to type '{ username: string; password: string; }'.
src/07-challenges/34-dynamic-reducer.problem.ts(95,7): error TS2578: Unused '@ts-expect-error' directive.
src/07-challenges/34-dynamic-reducer.problem.ts(104,5): error TS2578: Unused '@ts-expect-error' directive.
src/07-challenges/38-challenge-custom-jsx-element.problem.tsx(13,17): error TS2339: Property 'custom-element' does not exist on type 'JSX.IntrinsicElements'.
src/07-challenges/38-challenge-custom-jsx-element.problem.tsx(13,44): error TS2339: Property 'custom-element' does not exist on type 'JSX.IntrinsicElements'.
,"
`;

exports[`vitest > Should have the correct Vitest errors 1`] = `
{
  "success": false,
  "testResults": [
    {
      "assertionResults": [],
      "message": "No test found in suite src/01-branded-types/00-intro.explainer.ts",
      "name": "src/01-branded-types/00-intro.explainer.ts",
      "status": "passed",
    },
    {
      "assertionResults": [],
      "message": "No test found in suite src/01-branded-types/01-what-is-a-branded-type.explainer.ts",
      "name": "src/01-branded-types/01-what-is-a-branded-type.explainer.ts",
      "status": "passed",
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "",
            "onSubmitHandler",
          ],
          "failureMessages": [],
          "fullName": " onSubmitHandler Should error if the email is invalid",
          "status": "passed",
          "title": "Should error if the email is invalid",
        },
        {
          "ancestorTitles": [
            "",
            "onSubmitHandler",
          ],
          "failureMessages": [],
          "fullName": " onSubmitHandler Should error if the password is too short",
          "status": "passed",
          "title": "Should error if the password is too short",
        },
      ],
      "message": "",
      "name": "src/01-branded-types/02-form-validation.problem.ts",
      "status": "passed",
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "",
            "onSubmitHandler",
          ],
          "failureMessages": [],
          "fullName": " onSubmitHandler Should error if the email is invalid",
          "status": "passed",
          "title": "Should error if the email is invalid",
        },
        {
          "ancestorTitles": [
            "",
            "onSubmitHandler",
          ],
          "failureMessages": [],
          "fullName": " onSubmitHandler Should error if the password is too short",
          "status": "passed",
          "title": "Should error if the password is too short",
        },
      ],
      "message": "",
      "name": "src/01-branded-types/02-form-validation.solution.ts",
      "status": "passed",
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should only let you get a user by id with a user id",
          "status": "passed",
          "title": "Should only let you get a user by id with a user id",
        },
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should only let you get a post by id with a PostId",
          "status": "passed",
          "title": "Should only let you get a post by id with a PostId",
        },
      ],
      "message": "",
      "name": "src/01-branded-types/03-entity-fetching.problem.ts",
      "status": "passed",
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should only let you get a user by id with a user id",
          "status": "passed",
          "title": "Should only let you get a user by id with a user id",
        },
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should only let you get a post by id with a PostId",
          "status": "passed",
          "title": "Should only let you get a post by id with a PostId",
        },
      ],
      "message": "",
      "name": "src/01-branded-types/03-entity-fetching.solution.ts",
      "status": "passed",
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should fail if you do not validate the values before calling createUserOnApi",
          "status": "passed",
          "title": "Should fail if you do not validate the values before calling createUserOnApi",
        },
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should succeed if you DO validate the values before calling createUserOnApi",
          "status": "passed",
          "title": "Should succeed if you DO validate the values before calling createUserOnApi",
        },
      ],
      "message": "",
      "name": "src/01-branded-types/04-reusable-valid-brand.problem.ts",
      "status": "passed",
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should fail if you do not validate the values before calling createUserOnApi",
          "status": "passed",
          "title": "Should fail if you do not validate the values before calling createUserOnApi",
        },
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should succeed if you DO validate the values before calling createUserOnApi",
          "status": "passed",
          "title": "Should succeed if you DO validate the values before calling createUserOnApi",
        },
      ],
      "message": "",
      "name": "src/01-branded-types/04-reusable-valid-brand.solution.ts",
      "status": "passed",
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "",
            "Possible implementations",
          ],
          "failureMessages": [],
          "fullName": " Possible implementations Should error if you do not authorize the user first",
          "status": "passed",
          "title": "Should error if you do not authorize the user first",
        },
        {
          "ancestorTitles": [
            "",
            "Possible implementations",
          ],
          "failureMessages": [],
          "fullName": " Possible implementations Should error if you do not convert the amount first",
          "status": "passed",
          "title": "Should error if you do not convert the amount first",
        },
        {
          "ancestorTitles": [
            "",
            "Possible implementations",
          ],
          "failureMessages": [],
          "fullName": " Possible implementations Should pass type checking if you authorize the user AND convert the amount",
          "status": "passed",
          "title": "Should pass type checking if you authorize the user AND convert the amount",
        },
      ],
      "message": "",
      "name": "src/01-branded-types/05-currency-conversion.problem.ts",
      "status": "passed",
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "",
            "Possible implementations",
          ],
          "failureMessages": [],
          "fullName": " Possible implementations Should error if you do not authorize the user first",
          "status": "passed",
          "title": "Should error if you do not authorize the user first",
        },
        {
          "ancestorTitles": [
            "",
            "Possible implementations",
          ],
          "failureMessages": [],
          "fullName": " Possible implementations Should error if you do not convert the amount first",
          "status": "passed",
          "title": "Should error if you do not convert the amount first",
        },
        {
          "ancestorTitles": [
            "",
            "Possible implementations",
          ],
          "failureMessages": [],
          "fullName": " Possible implementations Should pass type checking if you authorize the user AND convert the amount",
          "status": "passed",
          "title": "Should pass type checking if you authorize the user AND convert the amount",
        },
      ],
      "message": "",
      "name": "src/01-branded-types/05-currency-conversion.solution.ts",
      "status": "passed",
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should let you add users and posts to the db by their id",
          "status": "passed",
          "title": "Should let you add users and posts to the db by their id",
        },
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should fail if you try to add a user under a post id",
          "status": "passed",
          "title": "Should fail if you try to add a user under a post id",
        },
      ],
      "message": "",
      "name": "src/01-branded-types/06-index-signatures.problem.ts",
      "status": "passed",
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should let you add users and posts to the db by their id",
          "status": "passed",
          "title": "Should let you add users and posts to the db by their id",
        },
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should fail if you try to add a user under a post id",
          "status": "passed",
          "title": "Should fail if you try to add a user under a post id",
        },
      ],
      "message": "",
      "name": "src/01-branded-types/06-index-signatures.solution.ts",
      "status": "passed",
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should let you call myFunc without it being imported",
          "status": "passed",
          "title": "Should let you call myFunc without it being imported",
        },
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should let you access myVar without it being imported",
          "status": "passed",
          "title": "Should let you access myVar without it being imported",
        },
      ],
      "message": "",
      "name": "src/02-globals/07-add-function-to-global-scope.problem.ts",
      "status": "passed",
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should let you call myFunc without it being imported",
          "status": "passed",
          "title": "Should let you call myFunc without it being imported",
        },
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should let you access myVar without it being imported",
          "status": "passed",
          "title": "Should let you access myVar without it being imported",
        },
      ],
      "message": "",
      "name": "src/02-globals/07-add-function-to-global-scope.solution.ts",
      "status": "passed",
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [
            "expected 'Hello!' to be 'Hello, world!' // Object.is equality",
          ],
          "fullName": " Should let you call makeGreeting from the window object",
          "location": {
            "column": 33,
            "line": 16,
          },
          "status": "failed",
          "title": "Should let you call makeGreeting from the window object",
        },
      ],
      "message": "",
      "name": "src/02-globals/08-add-to-window.problem.ts",
      "status": "failed",
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should let you call makeGreetingSolution from the window object",
          "status": "passed",
          "title": "Should let you call makeGreetingSolution from the window object",
        },
      ],
      "message": "",
      "name": "src/02-globals/08-add-to-window.solution.ts",
      "status": "passed",
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should be declared as a string",
          "status": "passed",
          "title": "Should be declared as a string",
        },
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should NOT have undefined in the type",
          "status": "passed",
          "title": "Should NOT have undefined in the type",
        },
      ],
      "message": "",
      "name": "src/02-globals/09-adding-to-process-env.problem.ts",
      "status": "passed",
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should be declared as a string",
          "status": "passed",
          "title": "Should be declared as a string",
        },
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should NOT have undefined in the type",
          "status": "passed",
          "title": "Should NOT have undefined in the type",
        },
      ],
      "message": "",
      "name": "src/02-globals/09-adding-to-process-env.solution.ts",
      "status": "passed",
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should be able to dispatch a LOG_IN and LOG_OUT event",
          "status": "passed",
          "title": "Should be able to dispatch a LOG_IN and LOG_OUT event",
        },
      ],
      "message": "",
      "name": "src/02-globals/10-event-dispatcher.problem.1.ts",
      "status": "passed",
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should be able to handle LOG_OUT and UPDATE_USERNAME events",
          "status": "passed",
          "title": "Should be able to handle LOG_OUT and UPDATE_USERNAME events",
        },
      ],
      "message": "",
      "name": "src/02-globals/10-event-dispatcher.problem.2.ts",
      "status": "passed",
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should be able to dispatch a LOG_IN and LOG_OUT event",
          "status": "passed",
          "title": "Should be able to dispatch a LOG_IN and LOG_OUT event",
        },
      ],
      "message": "",
      "name": "src/02-globals/10-event-dispatcher.solution.1.ts",
      "status": "passed",
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should be able to handle LOG_OUT and UPDATE_USERNAME events",
          "status": "passed",
          "title": "Should be able to handle LOG_OUT and UPDATE_USERNAME events",
        },
      ],
      "message": "",
      "name": "src/02-globals/10-event-dispatcher.solution.2.ts",
      "status": "passed",
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should filter out the undefined values",
          "status": "passed",
          "title": "Should filter out the undefined values",
        },
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should be of type \\"string[]\\"",
          "status": "passed",
          "title": "Should be of type \\"string[]\\"",
        },
      ],
      "message": "",
      "name": "src/03-type-predicates-assertion-functions/12-type-predicates-with-filter.problem.ts",
      "status": "passed",
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should filter out the undefined values",
          "status": "passed",
          "title": "Should filter out the undefined values",
        },
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should be of type \\"string[]\\"",
          "status": "passed",
          "title": "Should be of type \\"string[]\\"",
        },
      ],
      "message": "",
      "name": "src/03-type-predicates-assertion-functions/12-type-predicates-with-filter.solution.1.ts",
      "status": "passed",
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should filter out the undefined values",
          "status": "passed",
          "title": "Should filter out the undefined values",
        },
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should be of type \\"string[]\\"",
          "status": "passed",
          "title": "Should be of type \\"string[]\\"",
        },
      ],
      "message": "",
      "name": "src/03-type-predicates-assertion-functions/12-type-predicates-with-filter.solution.2.ts",
      "status": "passed",
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should throw an error when it encounters a normal user",
          "status": "passed",
          "title": "Should throw an error when it encounters a normal user",
        },
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should assert that the type is an admin user after it has been validated",
          "status": "passed",
          "title": "Should assert that the type is an admin user after it has been validated",
        },
      ],
      "message": "",
      "name": "src/03-type-predicates-assertion-functions/13-assertion-functions.problem.ts",
      "status": "passed",
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should throw an error when it encounters a normal user",
          "status": "passed",
          "title": "Should throw an error when it encounters a normal user",
        },
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should assert that the type is an admin user after it has been validated",
          "status": "passed",
          "title": "Should assert that the type is an admin user after it has been validated",
        },
      ],
      "message": "",
      "name": "src/03-type-predicates-assertion-functions/13-assertion-functions.solution.ts",
      "status": "passed",
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should throw an error when it encounters a normal user",
          "status": "passed",
          "title": "Should throw an error when it encounters a normal user",
        },
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should assert that the type is an admin user after it has been validated",
          "status": "passed",
          "title": "Should assert that the type is an admin user after it has been validated",
        },
      ],
      "message": "",
      "name": "src/03-type-predicates-assertion-functions/14-typescripts-worst-error.problem.ts",
      "status": "passed",
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should throw an error when it encounters a normal user",
          "status": "passed",
          "title": "Should throw an error when it encounters a normal user",
        },
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should assert that the type is an admin user after it has been validated",
          "status": "passed",
          "title": "Should assert that the type is an admin user after it has been validated",
        },
      ],
      "message": "",
      "name": "src/03-type-predicates-assertion-functions/14-typescripts-worst-error.solution.ts",
      "status": "passed",
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should pick up that \\"extractDivs\\" is of type \\"HTMLDivElement[]\\"",
          "status": "passed",
          "title": "Should pick up that \\"extractDivs\\" is of type \\"HTMLDivElement[]\\"",
        },
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should pick up that \\"extractBodies\\" is of type \\"HTMLBodyElement[]\\"",
          "status": "passed",
          "title": "Should pick up that \\"extractBodies\\" is of type \\"HTMLBodyElement[]\\"",
        },
      ],
      "message": "",
      "name": "src/03-type-predicates-assertion-functions/15-type-predicates-with-generics.problem.ts",
      "status": "passed",
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should pick up that \\"extractDivs\\" is of type \\"HTMLDivElement[]\\"",
          "status": "passed",
          "title": "Should pick up that \\"extractDivs\\" is of type \\"HTMLDivElement[]\\"",
        },
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should pick up that \\"extractBodies\\" is of type \\"HTMLBodyElement[]\\"",
          "status": "passed",
          "title": "Should pick up that \\"extractBodies\\" is of type \\"HTMLBodyElement[]\\"",
        },
      ],
      "message": "",
      "name": "src/03-type-predicates-assertion-functions/15-type-predicates-with-generics.solution.ts",
      "status": "passed",
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should fail if you do not validate the values before calling createUserOnApi",
          "status": "passed",
          "title": "Should fail if you do not validate the values before calling createUserOnApi",
        },
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should succeed if you DO validate the values before calling createUserOnApi",
          "status": "passed",
          "title": "Should succeed if you DO validate the values before calling createUserOnApi",
        },
      ],
      "message": "",
      "name": "src/03-type-predicates-assertion-functions/16-brands-and-type-predicates.problem.ts",
      "status": "passed",
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should fail if you do not validate the passwords before calling createUserOnApi",
          "status": "passed",
          "title": "Should fail if you do not validate the passwords before calling createUserOnApi",
        },
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should succeed if you DO validate the passwords before calling createUserOnApi",
          "status": "passed",
          "title": "Should succeed if you DO validate the passwords before calling createUserOnApi",
        },
      ],
      "message": "",
      "name": "src/03-type-predicates-assertion-functions/16-brands-and-type-predicates.solution.ts",
      "status": "passed",
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should fail if you do not validate the passwords before calling createUserOnApi",
          "status": "passed",
          "title": "Should fail if you do not validate the passwords before calling createUserOnApi",
        },
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should succeed if you DO validate the passwords before calling createUserOnApi",
          "status": "passed",
          "title": "Should succeed if you DO validate the passwords before calling createUserOnApi",
        },
      ],
      "message": "",
      "name": "src/03-type-predicates-assertion-functions/17-brands-and-assertion-functions.problem.ts",
      "status": "passed",
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should fail if you do not validate the passwords before calling createUserOnApi",
          "status": "passed",
          "title": "Should fail if you do not validate the passwords before calling createUserOnApi",
        },
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should succeed if you DO validate the passwords before calling createUserOnApi",
          "status": "passed",
          "title": "Should succeed if you DO validate the passwords before calling createUserOnApi",
        },
      ],
      "message": "",
      "name": "src/03-type-predicates-assertion-functions/17-brands-and-assertion-functions.solution.ts",
      "status": "passed",
    },
    {
      "assertionResults": [],
      "message": "No test found in suite src/04-classes/17.8-classes-as-types-and-value.problem.ts",
      "name": "src/04-classes/17.8-classes-as-types-and-value.problem.ts",
      "status": "passed",
    },
    {
      "assertionResults": [],
      "message": "No test found in suite src/04-classes/17.8-classes-as-types-and-value.solution.ts",
      "name": "src/04-classes/17.8-classes-as-types-and-value.solution.ts",
      "status": "passed",
    },
    {
      "assertionResults": [],
      "message": "No test found in suite src/04-classes/18-type-predicates-and-classes.problem.ts",
      "name": "src/04-classes/18-type-predicates-and-classes.problem.ts",
      "status": "passed",
    },
    {
      "assertionResults": [],
      "message": "No test found in suite src/04-classes/18-type-predicates-and-classes.solution.ts",
      "name": "src/04-classes/18-type-predicates-and-classes.solution.ts",
      "status": "passed",
    },
    {
      "assertionResults": [],
      "message": "No test found in suite src/04-classes/18.2-assertion-functions-and-classes.problem.ts",
      "name": "src/04-classes/18.2-assertion-functions-and-classes.problem.ts",
      "status": "passed",
    },
    {
      "assertionResults": [],
      "message": "No test found in suite src/04-classes/18.2-assertion-functions-and-classes.solution.ts",
      "name": "src/04-classes/18.2-assertion-functions-and-classes.solution.ts",
      "status": "passed",
    },
    {
      "assertionResults": [],
      "message": "No test found in suite src/04-classes/19.3-builder-pattern-intro.explainer.ts",
      "name": "src/04-classes/19.3-builder-pattern-intro.explainer.ts",
      "status": "passed",
    },
    {
      "assertionResults": [],
      "message": "No test found in suite src/04-classes/19.4-alex-trpc-builder-pattern.explainer.ts",
      "name": "src/04-classes/19.4-alex-trpc-builder-pattern.explainer.ts",
      "status": "passed",
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should not allow getting values which do not exist",
          "status": "passed",
          "title": "Should not allow getting values which do not exist",
        },
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should return values from keys which do exist",
          "status": "passed",
          "title": "Should return values from keys which do exist",
        },
      ],
      "message": "",
      "name": "src/04-classes/20-type-safe-map.problem.ts",
      "status": "passed",
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should not allow getting values which do not exist",
          "status": "passed",
          "title": "Should not allow getting values which do not exist",
        },
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should return values from keys which do exist",
          "status": "passed",
          "title": "Should return values from keys which do exist",
        },
      ],
      "message": "",
      "name": "src/04-classes/20-type-safe-map.solution.ts",
      "status": "passed",
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should not allow getting values which do not exist",
          "status": "passed",
          "title": "Should not allow getting values which do not exist",
        },
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should return values from keys which do exist",
          "status": "passed",
          "title": "Should return values from keys which do exist",
        },
      ],
      "message": "",
      "name": "src/04-classes/21-importance-of-default-generic.problem.ts",
      "status": "passed",
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should not allow getting values which do not exist",
          "status": "passed",
          "title": "Should not allow getting values which do not exist",
        },
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should return values from keys which do exist",
          "status": "passed",
          "title": "Should return values from keys which do exist",
        },
      ],
      "message": "",
      "name": "src/04-classes/21-importance-of-default-generic.solution.ts",
      "status": "passed",
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should fail if the user id is 123",
          "status": "passed",
          "title": "Should fail if the user id is 123",
        },
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should return a request with a user",
          "status": "passed",
          "title": "Should return a request with a user",
        },
      ],
      "message": "",
      "name": "src/04-classes/22-dynamic-middleware.problem.ts",
      "status": "passed",
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should fail if the user id is 123",
          "status": "passed",
          "title": "Should fail if the user id is 123",
        },
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should return a request with a user",
          "status": "passed",
          "title": "Should return a request with a user",
        },
      ],
      "message": "",
      "name": "src/04-classes/22-dynamic-middleware.solution.ts",
      "status": "passed",
    },
    {
      "assertionResults": [],
      "message": "No test found in suite src/04-classes/22.5-subclassing-in-zod.explainer.ts",
      "name": "src/04-classes/22.5-subclassing-in-zod.explainer.ts",
      "status": "passed",
    },
    {
      "assertionResults": [],
      "message": "No test found in suite src/05-external-libraries/22.9-where-do-external-types-come-from.explainer.ts",
      "name": "src/05-external-libraries/22.9-where-do-external-types-come-from.explainer.ts",
      "status": "passed",
    },
    {
      "assertionResults": [],
      "message": "No test found in suite src/05-external-libraries/23-extract-external-lib-types.problem.ts",
      "name": "src/05-external-libraries/23-extract-external-lib-types.problem.ts",
      "status": "passed",
    },
    {
      "assertionResults": [],
      "message": "No test found in suite src/05-external-libraries/23-extract-external-lib-types.solution.ts",
      "name": "src/05-external-libraries/23-extract-external-lib-types.solution.ts",
      "status": "passed",
    },
    {
      "assertionResults": [],
      "message": "No test found in suite src/05-external-libraries/23.9-lodash-types.explainer.ts",
      "name": "src/05-external-libraries/23.9-lodash-types.explainer.ts",
      "status": "passed",
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should group the items by age",
          "status": "passed",
          "title": "Should group the items by age",
        },
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should not let you pass in an array of objects NOT containing age",
          "status": "passed",
          "title": "Should not let you pass in an array of objects NOT containing age",
        },
      ],
      "message": "",
      "name": "src/05-external-libraries/24-lodash-groupby.problem.ts",
      "status": "passed",
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should group the items by age",
          "status": "passed",
          "title": "Should group the items by age",
        },
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should not let you pass in an array of objects NOT containing age",
          "status": "passed",
          "title": "Should not let you pass in an array of objects NOT containing age",
        },
      ],
      "message": "",
      "name": "src/05-external-libraries/24-lodash-groupby.solution.ts",
      "status": "passed",
    },
    {
      "assertionResults": [],
      "message": "No test found in suite src/05-external-libraries/24.9-express-types.explainer.ts",
      "name": "src/05-external-libraries/24.9-express-types.explainer.ts",
      "status": "passed",
    },
    {
      "assertionResults": [],
      "message": "No test found in suite src/05-external-libraries/25-usage-with-express.problem.ts",
      "name": "src/05-external-libraries/25-usage-with-express.problem.ts",
      "status": "passed",
    },
    {
      "assertionResults": [],
      "message": "No test found in suite src/05-external-libraries/25-usage-with-express.solution.ts",
      "name": "src/05-external-libraries/25-usage-with-express.solution.ts",
      "status": "passed",
    },
    {
      "assertionResults": [],
      "message": "No test found in suite src/05-external-libraries/25.9-zod-types.explainer.ts",
      "name": "src/05-external-libraries/25.9-zod-types.explainer.ts",
      "status": "passed",
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should error on the type level AND the runtime if you pass incorrect params",
          "status": "passed",
          "title": "Should error on the type level AND the runtime if you pass incorrect params",
        },
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should succeed if you pass the correct type",
          "status": "passed",
          "title": "Should succeed if you pass the correct type",
        },
      ],
      "message": "",
      "name": "src/05-external-libraries/26-usage-with-zod.problem.ts",
      "status": "passed",
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should error on the type level AND the runtime if you pass incorrect params",
          "status": "passed",
          "title": "Should error on the type level AND the runtime if you pass incorrect params",
        },
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should succeed if you pass the correct type",
          "status": "passed",
          "title": "Should succeed if you pass the correct type",
        },
      ],
      "message": "",
      "name": "src/05-external-libraries/26-usage-with-zod.solution.1.ts",
      "status": "passed",
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should error on the type level AND the runtime if you pass incorrect params",
          "status": "passed",
          "title": "Should error on the type level AND the runtime if you pass incorrect params",
        },
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should succeed if you pass the correct type",
          "status": "passed",
          "title": "Should succeed if you pass the correct type",
        },
      ],
      "message": "",
      "name": "src/05-external-libraries/26-usage-with-zod.solution.2.ts",
      "status": "passed",
    },
    {
      "assertionResults": [],
      "message": "No test found in suite src/05-external-libraries/26.5-declaration.solution.d.ts",
      "name": "src/05-external-libraries/26.5-declaration.solution.d.ts",
      "status": "passed",
    },
    {
      "assertionResults": [],
      "message": "No test found in suite src/05-external-libraries/26.5-override-external-lib-types.problem.ts",
      "name": "src/05-external-libraries/26.5-override-external-lib-types.problem.ts",
      "status": "passed",
    },
    {
      "assertionResults": [],
      "message": "No test found in suite src/05-external-libraries/26.5-override-external-lib-types.solution.ts",
      "name": "src/05-external-libraries/26.5-override-external-lib-types.solution.ts",
      "status": "passed",
    },
    {
      "assertionResults": [],
      "message": "No test found in suite src/06-identity-functions/27-const-annotations.problem.ts",
      "name": "src/06-identity-functions/27-const-annotations.problem.ts",
      "status": "passed",
    },
    {
      "assertionResults": [],
      "message": "No test found in suite src/06-identity-functions/27-const-annotations.solution.1.ts",
      "name": "src/06-identity-functions/27-const-annotations.solution.1.ts",
      "status": "passed",
    },
    {
      "assertionResults": [],
      "message": "No test found in suite src/06-identity-functions/27-const-annotations.solution.2.ts",
      "name": "src/06-identity-functions/27-const-annotations.solution.2.ts",
      "status": "passed",
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should ONLY let you pass an array of fruits",
          "status": "passed",
          "title": "Should ONLY let you pass an array of fruits",
        },
      ],
      "message": "",
      "name": "src/06-identity-functions/28-constraints-with-const-annotations.problem.ts",
      "status": "passed",
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should ONLY let you pass an array of fruits",
          "status": "passed",
          "title": "Should ONLY let you pass an array of fruits",
        },
      ],
      "message": "",
      "name": "src/06-identity-functions/28-constraints-with-const-annotations.solution.1.ts",
      "status": "passed",
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should ONLY let you pass an array of fruits",
          "status": "passed",
          "title": "Should ONLY let you pass an array of fruits",
        },
      ],
      "message": "",
      "name": "src/06-identity-functions/28-constraints-with-const-annotations.solution.2.ts",
      "status": "passed",
    },
    {
      "assertionResults": [],
      "message": "No test found in suite src/06-identity-functions/29-finite-state-machine.problem.ts",
      "name": "src/06-identity-functions/29-finite-state-machine.problem.ts",
      "status": "passed",
    },
    {
      "assertionResults": [],
      "message": "No test found in suite src/06-identity-functions/29-finite-state-machine.solution.ts",
      "name": "src/06-identity-functions/29-finite-state-machine.solution.ts",
      "status": "passed",
    },
    {
      "assertionResults": [],
      "message": "No test found in suite src/06-identity-functions/30-no-generics-on-objects.problem.ts",
      "name": "src/06-identity-functions/30-no-generics-on-objects.problem.ts",
      "status": "passed",
    },
    {
      "assertionResults": [],
      "message": "No test found in suite src/06-identity-functions/30-no-generics-on-objects.solution.1.ts",
      "name": "src/06-identity-functions/30-no-generics-on-objects.solution.1.ts",
      "status": "passed",
    },
    {
      "assertionResults": [],
      "message": "No test found in suite src/06-identity-functions/30-no-generics-on-objects.solution.2.ts",
      "name": "src/06-identity-functions/30-no-generics-on-objects.solution.2.ts",
      "status": "passed",
    },
    {
      "assertionResults": [],
      "message": "No test found in suite src/06-identity-functions/30.5-reverse-mapped-types.problem.ts",
      "name": "src/06-identity-functions/30.5-reverse-mapped-types.problem.ts",
      "status": "passed",
    },
    {
      "assertionResults": [],
      "message": "No test found in suite src/06-identity-functions/30.5-reverse-mapped-types.solution.ts",
      "name": "src/06-identity-functions/30.5-reverse-mapped-types.solution.ts",
      "status": "passed",
    },
    {
      "assertionResults": [],
      "message": "No test found in suite src/07-challenges/31-merge-dynamic-object-with-global.problem.ts",
      "name": "src/07-challenges/31-merge-dynamic-object-with-global.problem.ts",
      "status": "passed",
    },
    {
      "assertionResults": [],
      "message": "No test found in suite src/07-challenges/31-merge-dynamic-object-with-global.solution.ts",
      "name": "src/07-challenges/31-merge-dynamic-object-with-global.solution.ts",
      "status": "passed",
    },
    {
      "assertionResults": [],
      "message": "No test found in suite src/07-challenges/32-narrow-with-arrays.problem.ts",
      "name": "src/07-challenges/32-narrow-with-arrays.problem.ts",
      "status": "passed",
    },
    {
      "assertionResults": [],
      "message": "No test found in suite src/07-challenges/32-narrow-with-arrays.solution.ts",
      "name": "src/07-challenges/32-narrow-with-arrays.solution.ts",
      "status": "passed",
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should make the query AND body type safe",
          "status": "passed",
          "title": "Should make the query AND body type safe",
        },
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should default them to any if not passed in config",
          "status": "passed",
          "title": "Should default them to any if not passed in config",
        },
      ],
      "message": "",
      "name": "src/07-challenges/33-zod-with-express.problem.ts",
      "status": "passed",
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should make the query AND body type safe",
          "status": "passed",
          "title": "Should make the query AND body type safe",
        },
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should default them to any if not passed in config",
          "status": "passed",
          "title": "Should default them to any if not passed in config",
        },
      ],
      "message": "",
      "name": "src/07-challenges/33-zod-with-express.solution.ts",
      "status": "passed",
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should return the new state after LOG_IN",
          "status": "passed",
          "title": "Should return the new state after LOG_IN",
        },
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should return the new state after LOG_OUT",
          "status": "passed",
          "title": "Should return the new state after LOG_OUT",
        },
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should error if you pass it an incorrect action",
          "status": "passed",
          "title": "Should error if you pass it an incorrect action",
        },
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should error if you pass an incorrect payload",
          "status": "passed",
          "title": "Should error if you pass an incorrect payload",
        },
      ],
      "message": "",
      "name": "src/07-challenges/34-dynamic-reducer.problem.ts",
      "status": "passed",
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should return the new state after LOG_IN",
          "status": "passed",
          "title": "Should return the new state after LOG_IN",
        },
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should return the new state after LOG_OUT",
          "status": "passed",
          "title": "Should return the new state after LOG_OUT",
        },
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should error if you pass it an incorrect action",
          "status": "passed",
          "title": "Should error if you pass it an incorrect action",
        },
        {
          "ancestorTitles": [
            "",
          ],
          "failureMessages": [],
          "fullName": " Should error if you pass an incorrect payload",
          "status": "passed",
          "title": "Should error if you pass an incorrect payload",
        },
      ],
      "message": "",
      "name": "src/07-challenges/34-dynamic-reducer.solution.ts",
      "status": "passed",
    },
  ],
}
`;
